public class Solution {
    
    // 双向BFS时, 要统一成一个函数, interface需要的参数还是挺tricky的, 其他的没有什么难点
    // 需要两个queue, 两个visited set 
    public static final int aLen = 26;
    
    private boolean expand(Set<String> wordSet, Set<String> vself, Set<String> vother, Queue<String> q){
        // assert !q.isEmpty()
        int len = q.size();
        for(int i = 0; i < len; ++i){
            String s = q.poll();
            char[] ca = s.toCharArray();
            for(int k = 0; k < s.length(); ++k){
                char c = s.charAt(k);
                for(int j = 0; j < aLen; ++j){
                    if('a' + j != c){
                        ca[k] = (char)('a' + j);
                        String st = new String(ca);
                        if(wordSet.contains(st) && !vself.contains(st)){
                            q.add(st);
                            vself.add(st);
                            if(vother.contains(st))
                                return true;
                        }
                    }
                }
            ca[k] = c;
            }
        }
        
        return false;
    }
    
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // Double End BFS
        if(null == beginWord || null == endWord || null == wordList)
            return 0;
        
        if(beginWord == endWord)
            return 0;
        
        Queue<String> hq = new LinkedList<>();
        Queue<String> tq = new LinkedList<>();
        hq.offer(beginWord);
        tq.offer(endWord);
        Set<String> hv = new HashSet<>();
        Set<String> tv = new HashSet<>();
        hv.add(beginWord);
        tv.add(endWord);
        Set<String> wordSet = new HashSet<>(wordList);
        
        if(!wordSet.contains(endWord))
            return 0;
        
        int len = 1;
        
        while(!hq.isEmpty()&&!tq.isEmpty()){
            
            boolean hr = expand(wordSet, hv, tv, hq);
            len++;
            if(hr)
                return len;
            
            
            boolean tr = expand(wordSet, tv, hv, tq);
            len++;
            if(tr)
                return len;
            
        }
        
        return 0;
    }
}
